{
 "Description": "Hivemind-Prism Storage Infrastructure - S3, DynamoDB, and ElastiCache",
 "Resources": {
  "UploadsBucket5E5E9B64": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "KMSMasterKeyID": {
         "Fn::ImportValue": "HivemindPrism-Security:ExportsOutputFnGetAttHivemindKeyB4006B32ArnC7048005"
        },
        "SSEAlgorithm": "aws:kms"
       }
      }
     ]
    },
    "BucketName": "hivemind-uploads-909507831547",
    "LifecycleConfiguration": {
     "Rules": [
      {
       "ExpirationInDays": 7,
       "Id": "DeleteOldUploads",
       "Prefix": "uploads/",
       "Status": "Enabled"
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "HivemindPrism-Storage/UploadsBucket/Resource"
   }
  },
  "UploadsBucketPolicy34A32B0B": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "UploadsBucket5E5E9B64"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "UploadsBucket5E5E9B64",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "UploadsBucket5E5E9B64",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "HivemindPrism-Storage/UploadsBucket/Policy/Resource"
   }
  },
  "UploadsBucketNotifications4592A072": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "UploadsBucket5E5E9B64"
    },
    "NotificationConfiguration": {
     "EventBridgeConfiguration": {}
    },
    "Managed": true,
    "SkipDestinationValidation": false
   },
   "DependsOn": [
    "UploadsBucketPolicy34A32B0B"
   ],
   "Metadata": {
    "aws:cdk:path": "HivemindPrism-Storage/UploadsBucket/Notifications/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "HivemindPrism-Storage/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "UploadsBucket5E5E9B64",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "HivemindPrism-Storage/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    skipDestinationValidation = props.get('SkipDestinationValidation', 'false').lower() == 'true'\n    stack_id = event['StackId']\n    old = event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"BucketName\"], stack_id, event[\"RequestType\"], notification_configuration, old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):\n  def get_id(n):\n    n['Id'] = ''\n    sorted_notifications = sort_filter_rules(n)\n    strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('\"Name\": \"prefix\"', '\"Name\": \"Prefix\"').replace('\"Name\": \"suffix\"', '\"Name\": \"Suffix\"')\n    return f\"{stack_id}-{hash(strToHash)}\"\n  def with_id(n):\n    n['Id'] = get_id(n)\n    return n\n\n  external_notifications = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n        old_incoming_ids = [get_id(n) for n in old.get(t, [])]\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      \n    elif request_type == 'Delete':\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n    elif request_type == 'Create':\n        external_notifications[t] = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n\ndef sort_filter_rules(json_obj):\n  if not isinstance(json_obj, dict):\n      return json_obj\n  for key, value in json_obj.items():\n      if isinstance(value, dict):\n          json_obj[key] = sort_filter_rules(value)\n      elif isinstance(value, list):\n          json_obj[key] = [sort_filter_rules(item) for item in value]\n  if \"Filter\" in json_obj and \"Key\" in json_obj[\"Filter\"] and \"FilterRules\" in json_obj[\"Filter\"][\"Key\"]:\n      filter_rules = json_obj[\"Filter\"][\"Key\"][\"FilterRules\"]\n      sorted_filter_rules = sorted(filter_rules, key=lambda x: x[\"Name\"])\n      json_obj[\"Filter\"][\"Key\"][\"FilterRules\"] = sorted_filter_rules\n  return json_obj"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.13",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "HivemindPrism-Storage/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "ArtifactsBucket2AAC5544": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "KMSMasterKeyID": {
         "Fn::ImportValue": "HivemindPrism-Security:ExportsOutputFnGetAttHivemindKeyB4006B32ArnC7048005"
        },
        "SSEAlgorithm": "aws:kms"
       }
      }
     ]
    },
    "BucketName": "hivemind-artifacts-909507831547",
    "LifecycleConfiguration": {
     "Rules": [
      {
       "Id": "TransitionOldArtifacts",
       "Status": "Enabled",
       "Transitions": [
        {
         "StorageClass": "INTELLIGENT_TIERING",
         "TransitionInDays": 30
        },
        {
         "StorageClass": "GLACIER",
         "TransitionInDays": 90
        }
       ]
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "HivemindPrism-Storage/ArtifactsBucket/Resource"
   }
  },
  "ArtifactsBucketPolicy852CB646": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "ArtifactsBucket2AAC5544"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "ArtifactsBucket2AAC5544",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ArtifactsBucket2AAC5544",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "HivemindPrism-Storage/ArtifactsBucket/Policy/Resource"
   }
  },
  "KendraBucket8BF62693": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "KMSMasterKeyID": {
         "Fn::ImportValue": "HivemindPrism-Security:ExportsOutputFnGetAttHivemindKeyB4006B32ArnC7048005"
        },
        "SSEAlgorithm": "aws:kms"
       }
      }
     ]
    },
    "BucketName": "hivemind-kendra-memories-909507831547",
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "HivemindPrism-Storage/KendraBucket/Resource"
   }
  },
  "KendraBucketPolicy68B740C0": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "KendraBucket8BF62693"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "KendraBucket8BF62693",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "KendraBucket8BF62693",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "HivemindPrism-Storage/KendraBucket/Policy/Resource"
   }
  },
  "MissionStatusTable4039F7D7": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "mission_id",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "KeySchema": [
     {
      "AttributeName": "mission_id",
      "KeyType": "HASH"
     }
    ],
    "PointInTimeRecoverySpecification": {
     "PointInTimeRecoveryEnabled": true
    },
    "SSESpecification": {
     "KMSMasterKeyId": {
      "Fn::ImportValue": "HivemindPrism-Security:ExportsOutputFnGetAttHivemindKeyB4006B32ArnC7048005"
     },
     "SSEEnabled": true,
     "SSEType": "KMS"
    },
    "StreamSpecification": {
     "StreamViewType": "NEW_AND_OLD_IMAGES"
    },
    "TableName": "HivemindMissionStatus-909507831547",
    "TimeToLiveSpecification": {
     "AttributeName": "ttl",
     "Enabled": true
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "HivemindPrism-Storage/MissionStatusTable/Resource"
   }
  },
  "ToolResultsTable82CE91FE": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "mission_id",
      "AttributeType": "S"
     },
     {
      "AttributeName": "tool_timestamp",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "KeySchema": [
     {
      "AttributeName": "mission_id",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "tool_timestamp",
      "KeyType": "RANGE"
     }
    ],
    "PointInTimeRecoverySpecification": {
     "PointInTimeRecoveryEnabled": true
    },
    "SSESpecification": {
     "KMSMasterKeyId": {
      "Fn::ImportValue": "HivemindPrism-Security:ExportsOutputFnGetAttHivemindKeyB4006B32ArnC7048005"
     },
     "SSEEnabled": true,
     "SSEType": "KMS"
    },
    "TableName": "HivemindToolResults-909507831547",
    "TimeToLiveSpecification": {
     "AttributeName": "ttl",
     "Enabled": true
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "HivemindPrism-Storage/ToolResultsTable/Resource"
   }
  },
  "FindingsArchiveTable557F1EE3": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "finding_id",
      "AttributeType": "S"
     },
     {
      "AttributeName": "timestamp",
      "AttributeType": "N"
     },
     {
      "AttributeName": "repo_name",
      "AttributeType": "S"
     },
     {
      "AttributeName": "severity",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "GlobalSecondaryIndexes": [
     {
      "IndexName": "repo_name-timestamp-index",
      "KeySchema": [
       {
        "AttributeName": "repo_name",
        "KeyType": "HASH"
       },
       {
        "AttributeName": "timestamp",
        "KeyType": "RANGE"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     },
     {
      "IndexName": "severity-timestamp-index",
      "KeySchema": [
       {
        "AttributeName": "severity",
        "KeyType": "HASH"
       },
       {
        "AttributeName": "timestamp",
        "KeyType": "RANGE"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "finding_id",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "timestamp",
      "KeyType": "RANGE"
     }
    ],
    "PointInTimeRecoverySpecification": {
     "PointInTimeRecoveryEnabled": true
    },
    "SSESpecification": {
     "KMSMasterKeyId": {
      "Fn::ImportValue": "HivemindPrism-Security:ExportsOutputFnGetAttHivemindKeyB4006B32ArnC7048005"
     },
     "SSEEnabled": true,
     "SSEType": "KMS"
    },
    "TableName": "HivemindFindingsArchive-909507831547",
    "TimeToLiveSpecification": {
     "AttributeName": "ttl",
     "Enabled": true
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "HivemindPrism-Storage/FindingsArchiveTable/Resource"
   }
  },
  "RedisSubnetGroup": {
   "Type": "AWS::ElastiCache::SubnetGroup",
   "Properties": {
    "CacheSubnetGroupName": "hivemind-redis-subnet-group",
    "Description": "Subnet group for Hivemind ElastiCache Redis",
    "SubnetIds": [
     {
      "Fn::ImportValue": "HivemindPrism-Network:ExportsOutputRefHivemindVpcIsolatedSubnet1Subnet01ABE97E363D737D"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "HivemindPrism-Storage/RedisSubnetGroup"
   }
  },
  "RedisCluster": {
   "Type": "AWS::ElastiCache::CacheCluster",
   "Properties": {
    "AutoMinorVersionUpgrade": true,
    "CacheNodeType": "cache.t3.micro",
    "CacheSubnetGroupName": {
     "Ref": "RedisSubnetGroup"
    },
    "Engine": "redis",
    "NumCacheNodes": 1,
    "PreferredMaintenanceWindow": "sun:05:00-sun:06:00",
    "SnapshotRetentionLimit": 0,
    "TransitEncryptionEnabled": false,
    "VpcSecurityGroupIds": [
     {
      "Fn::ImportValue": "HivemindPrism-Security:ExportsOutputFnGetAttElastiCacheSg3DA9FF1DGroupId0AE1DF35"
     }
    ]
   },
   "DependsOn": [
    "RedisSubnetGroup"
   ],
   "Metadata": {
    "aws:cdk:path": "HivemindPrism-Storage/RedisCluster"
   }
  },
  "HivemindEventBus4FE0861A": {
   "Type": "AWS::Events::EventBus",
   "Properties": {
    "Name": "HivemindPrism"
   },
   "Metadata": {
    "aws:cdk:path": "HivemindPrism-Storage/HivemindEventBus/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/0WNwW7CMAxAv4V7arrssjMR4rgJdp/S1NVC0wTVNghF+fcpLYzTe7afZA1at9Bu7I0a149N8B3kE1s3Knujn0zvkHfiRmRlhviwFV8peHd/rde5KG8nyMcUsJ4Wvspn09+jnVLfQf623VouUhQGS+yddb8I2QzxJF1EPsxJLrUy9WCCEONcFF4xMkHeV+6EavH0Upb/SElmh+pfzBA/hS/CRcXUI5xpe337AN2C3pzJ+2aWyH5COK78AzEtiuYiAQAA"
   },
   "Metadata": {
    "aws:cdk:path": "HivemindPrism-Storage/CDKMetadata/Default"
   }
  }
 },
 "Outputs": {
  "UploadsBucketName": {
   "Description": "S3 bucket for code uploads",
   "Value": {
    "Ref": "UploadsBucket5E5E9B64"
   },
   "Export": {
    "Name": "HivemindPrism-UploadsBucket"
   }
  },
  "ArtifactsBucketName": {
   "Description": "S3 bucket for processing artifacts",
   "Value": {
    "Ref": "ArtifactsBucket2AAC5544"
   },
   "Export": {
    "Name": "HivemindPrism-ArtifactsBucket"
   }
  },
  "MissionStatusTableName": {
   "Description": "DynamoDB table for mission status",
   "Value": {
    "Ref": "MissionStatusTable4039F7D7"
   },
   "Export": {
    "Name": "HivemindPrism-MissionStatusTable"
   }
  },
  "FindingsArchiveTableName": {
   "Description": "DynamoDB table for findings archive",
   "Value": {
    "Ref": "FindingsArchiveTable557F1EE3"
   },
   "Export": {
    "Name": "HivemindPrism-FindingsArchiveTable"
   }
  },
  "RedisEndpoint": {
   "Description": "ElastiCache Redis endpoint",
   "Value": {
    "Fn::GetAtt": [
     "RedisCluster",
     "RedisEndpoint.Address"
    ]
   },
   "Export": {
    "Name": "HivemindPrism-RedisEndpoint"
   }
  },
  "RedisPort": {
   "Description": "ElastiCache Redis port",
   "Value": {
    "Fn::GetAtt": [
     "RedisCluster",
     "RedisEndpoint.Port"
    ]
   }
  },
  "EventBusName": {
   "Description": "EventBridge event bus name",
   "Value": {
    "Ref": "HivemindEventBus4FE0861A"
   },
   "Export": {
    "Name": "HivemindPrism-EventBusName"
   }
  },
  "ExportsOutputFnGetAttKendraBucket8BF62693Arn114FE289": {
   "Value": {
    "Fn::GetAtt": [
     "KendraBucket8BF62693",
     "Arn"
    ]
   },
   "Export": {
    "Name": "HivemindPrism-Storage:ExportsOutputFnGetAttKendraBucket8BF62693Arn114FE289"
   }
  },
  "ExportsOutputRefKendraBucket8BF6269392D44149": {
   "Value": {
    "Ref": "KendraBucket8BF62693"
   },
   "Export": {
    "Name": "HivemindPrism-Storage:ExportsOutputRefKendraBucket8BF6269392D44149"
   }
  },
  "ExportsOutputFnGetAttArtifactsBucket2AAC5544ArnD57FAE19": {
   "Value": {
    "Fn::GetAtt": [
     "ArtifactsBucket2AAC5544",
     "Arn"
    ]
   },
   "Export": {
    "Name": "HivemindPrism-Storage:ExportsOutputFnGetAttArtifactsBucket2AAC5544ArnD57FAE19"
   }
  },
  "ExportsOutputFnGetAttUploadsBucket5E5E9B64Arn8603C131": {
   "Value": {
    "Fn::GetAtt": [
     "UploadsBucket5E5E9B64",
     "Arn"
    ]
   },
   "Export": {
    "Name": "HivemindPrism-Storage:ExportsOutputFnGetAttUploadsBucket5E5E9B64Arn8603C131"
   }
  },
  "ExportsOutputFnGetAttMissionStatusTable4039F7D7ArnEFD2A9B1": {
   "Value": {
    "Fn::GetAtt": [
     "MissionStatusTable4039F7D7",
     "Arn"
    ]
   },
   "Export": {
    "Name": "HivemindPrism-Storage:ExportsOutputFnGetAttMissionStatusTable4039F7D7ArnEFD2A9B1"
   }
  },
  "ExportsOutputFnGetAttToolResultsTable82CE91FEArnDA855BED": {
   "Value": {
    "Fn::GetAtt": [
     "ToolResultsTable82CE91FE",
     "Arn"
    ]
   },
   "Export": {
    "Name": "HivemindPrism-Storage:ExportsOutputFnGetAttToolResultsTable82CE91FEArnDA855BED"
   }
  },
  "ExportsOutputFnGetAttFindingsArchiveTable557F1EE3Arn6A182E86": {
   "Value": {
    "Fn::GetAtt": [
     "FindingsArchiveTable557F1EE3",
     "Arn"
    ]
   },
   "Export": {
    "Name": "HivemindPrism-Storage:ExportsOutputFnGetAttFindingsArchiveTable557F1EE3Arn6A182E86"
   }
  },
  "ExportsOutputRefArtifactsBucket2AAC55442DB5E6C9": {
   "Value": {
    "Ref": "ArtifactsBucket2AAC5544"
   },
   "Export": {
    "Name": "HivemindPrism-Storage:ExportsOutputRefArtifactsBucket2AAC55442DB5E6C9"
   }
  },
  "ExportsOutputRefMissionStatusTable4039F7D7C921D396": {
   "Value": {
    "Ref": "MissionStatusTable4039F7D7"
   },
   "Export": {
    "Name": "HivemindPrism-Storage:ExportsOutputRefMissionStatusTable4039F7D7C921D396"
   }
  },
  "ExportsOutputRefToolResultsTable82CE91FE867ADBA2": {
   "Value": {
    "Ref": "ToolResultsTable82CE91FE"
   },
   "Export": {
    "Name": "HivemindPrism-Storage:ExportsOutputRefToolResultsTable82CE91FE867ADBA2"
   }
  },
  "ExportsOutputRefFindingsArchiveTable557F1EE361AAD2FC": {
   "Value": {
    "Ref": "FindingsArchiveTable557F1EE3"
   },
   "Export": {
    "Name": "HivemindPrism-Storage:ExportsOutputRefFindingsArchiveTable557F1EE361AAD2FC"
   }
  },
  "ExportsOutputFnGetAttRedisClusterRedisEndpointAddress2C712DA2": {
   "Value": {
    "Fn::GetAtt": [
     "RedisCluster",
     "RedisEndpoint.Address"
    ]
   },
   "Export": {
    "Name": "HivemindPrism-Storage:ExportsOutputFnGetAttRedisClusterRedisEndpointAddress2C712DA2"
   }
  },
  "ExportsOutputFnGetAttRedisClusterRedisEndpointPortD2710AFC": {
   "Value": {
    "Fn::GetAtt": [
     "RedisCluster",
     "RedisEndpoint.Port"
    ]
   },
   "Export": {
    "Name": "HivemindPrism-Storage:ExportsOutputFnGetAttRedisClusterRedisEndpointPortD2710AFC"
   }
  },
  "ExportsOutputRefUploadsBucket5E5E9B64F2F56CC2": {
   "Value": {
    "Ref": "UploadsBucket5E5E9B64"
   },
   "Export": {
    "Name": "HivemindPrism-Storage:ExportsOutputRefUploadsBucket5E5E9B64F2F56CC2"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}